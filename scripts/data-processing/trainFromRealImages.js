// –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö —Ü–∏—Ñ—Ä –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞

const fs = require('fs');
const path = require('path');
const https = require('https');

// –ü—Ä–æ—Å—Ç–∞—è —Å–∏–≥–º–æ–∏–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const sigmoid = (x) => {
  x = Math.max(-10, Math.min(10, x));
  return 1 / (1 + Math.exp(-x));
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ü–∏—Ñ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º
const createRealisticDigitPatterns = () => {
  const patterns = {};
  const size = 30;
  
  // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ü–∏—Ñ—Ä
  for (let digit = 0; digit <= 9; digit++) {
    const field = Array(size).fill().map(() => Array(size).fill(0));
    
    switch(digit) {
      case 0: // –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å
        const centerX = size / 2;
        const centerY = size / 2;
        const radius = size * 0.35;
        for (let y = 0; y < size; y++) {
          for (let x = 0; x < size; x++) {
            const dist = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
            if (dist <= radius && dist >= radius * 0.6) {
              field[y][x] = 1;
            }
          }
        }
        break;
        
      case 1: // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º –Ω–∞–∫–ª–æ–Ω–æ–º
        const midX = Math.floor(size * 0.5);
        for (let y = Math.floor(size * 0.15); y < Math.floor(size * 0.85); y++) {
          const x = midX + Math.floor((y - size * 0.5) * 0.1);
          if (x >= 0 && x < size) field[y][x] = 1;
        }
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å–≤–µ—Ä—Ö—É
        for (let x = Math.floor(size * 0.4); x < Math.floor(size * 0.6); x++) {
          field[Math.floor(size * 0.2)][x] = 1;
        }
        break;
        
      case 2: // –§–æ—Ä–º–∞ –¥–≤–æ–π–∫–∏
        // –í–µ—Ä—Ö–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.2)][x] = 1;
        }
        // –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å)
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.5); y++) {
          field[y][Math.floor(size * 0.8)] = 1;
        }
        // –°—Ä–µ–¥–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.5)][x] = 1;
        }
        // –õ–µ–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
        for (let y = Math.floor(size * 0.5); y < Math.floor(size * 0.8); y++) {
          field[y][Math.floor(size * 0.2)] = 1;
        }
        // –ù–∏–∂–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.8)][x] = 1;
        }
        break;
        
      case 3: // –§–æ—Ä–º–∞ —Ç—Ä–æ–π–∫–∏
        // –í–µ—Ä—Ö–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.2)][x] = 1;
        }
        // –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.8); y++) {
          field[y][Math.floor(size * 0.8)] = 1;
        }
        // –°—Ä–µ–¥–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.5)][x] = 1;
        }
        // –ù–∏–∂–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.8)][x] = 1;
        }
        break;
        
      case 4: // –§–æ—Ä–º–∞ —á–µ—Ç–≤–µ—Ä–∫–∏
        // –õ–µ–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å)
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.5); y++) {
          field[y][Math.floor(size * 0.2)] = 1;
        }
        // –°—Ä–µ–¥–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.5)][x] = 1;
        }
        // –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.8); y++) {
          field[y][Math.floor(size * 0.8)] = 1;
        }
        break;
        
      case 5: // –§–æ—Ä–º–∞ –ø—è—Ç–µ—Ä–∫–∏
        // –í–µ—Ä—Ö–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.2)][x] = 1;
        }
        // –õ–µ–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å)
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.5); y++) {
          field[y][Math.floor(size * 0.2)] = 1;
        }
        // –°—Ä–µ–¥–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.5)][x] = 1;
        }
        // –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
        for (let y = Math.floor(size * 0.5); y < Math.floor(size * 0.8); y++) {
          field[y][Math.floor(size * 0.8)] = 1;
        }
        // –ù–∏–∂–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.8)][x] = 1;
        }
        break;
        
      case 6: // –§–æ—Ä–º–∞ —à–µ—Å—Ç–µ—Ä–∫–∏
        // –í–µ—Ä—Ö–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.2)][x] = 1;
        }
        // –õ–µ–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.8); y++) {
          field[y][Math.floor(size * 0.2)] = 1;
        }
        // –°—Ä–µ–¥–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.5)][x] = 1;
        }
        // –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
        for (let y = Math.floor(size * 0.5); y < Math.floor(size * 0.8); y++) {
          field[y][Math.floor(size * 0.8)] = 1;
        }
        // –ù–∏–∂–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.8)][x] = 1;
        }
        break;
        
      case 7: // –§–æ—Ä–º–∞ —Å–µ–º–µ—Ä–∫–∏
        // –í–µ—Ä—Ö–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.2)][x] = 1;
        }
        // –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.8); y++) {
          field[y][Math.floor(size * 0.8)] = 1;
        }
        break;
        
      case 8: // –§–æ—Ä–º–∞ –≤–æ—Å—å–º–µ—Ä–∫–∏
        // –í–µ—Ä—Ö–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.2)][x] = 1;
        }
        // –°—Ä–µ–¥–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.5)][x] = 1;
        }
        // –ù–∏–∂–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.8)][x] = 1;
        }
        // –õ–µ–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.8); y++) {
          field[y][Math.floor(size * 0.2)] = 1;
        }
        // –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.8); y++) {
          field[y][Math.floor(size * 0.8)] = 1;
        }
        break;
        
      case 9: // –§–æ—Ä–º–∞ –¥–µ–≤—è—Ç–∫–∏
        // –í–µ—Ä—Ö–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.2)][x] = 1;
        }
        // –°—Ä–µ–¥–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.5)][x] = 1;
        }
        // –ù–∏–∂–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
        for (let x = Math.floor(size * 0.2); x < Math.floor(size * 0.8); x++) {
          field[Math.floor(size * 0.8)][x] = 1;
        }
        // –õ–µ–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å)
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.5); y++) {
          field[y][Math.floor(size * 0.2)] = 1;
        }
        // –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
        for (let y = Math.floor(size * 0.2); y < Math.floor(size * 0.8); y++) {
          field[y][Math.floor(size * 0.8)] = 1;
        }
        break;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤
    patterns[digit] = field.flat();
  }
  
  return patterns;
};

// –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
const trainNetwork = (patterns, canvasSize = 30) => {
  const totalPixels = canvasSize * canvasSize;
  const weights = {};
  const biases = {};
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
  for (let digit = 0; digit <= 9; digit++) {
    weights[digit] = new Array(totalPixels).fill(0).map(() => (Math.random() - 0.5) * 0.01);
    biases[digit] = (Math.random() - 0.5) * 0.01;
  }
  
  const learningRate = 0.01;
  const epochs = 5; // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —ç–ø–æ—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
  
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö...');
  console.log(`üìä –†–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞: ${canvasSize}x${canvasSize}`);
  console.log(`üìà –≠–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è: ${epochs}`);
  
  for (let epoch = 0; epoch < epochs; epoch++) {
    let totalError = 0;
    
    for (let digit = 0; digit <= 9; digit++) {
      const pattern = patterns[digit];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Ü–∏—Ñ—Ä
      for (let d = 0; d <= 9; d++) {
        let sum = biases[d];
        for (let i = 0; i < totalPixels; i++) {
          sum += pattern[i] * weights[d][i];
        }
        
        const prediction = sigmoid(sum);
        const target = d === digit ? 1 : 0;
        const error = target - prediction;
        totalError += Math.abs(error);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞
        biases[d] += learningRate * error;
        for (let i = 0; i < totalPixels; i++) {
          weights[d][i] += learningRate * error * pattern[i];
        }
      }
    }
    
    console.log(`–≠–ø–æ—Ö–∞ ${epoch + 1}/${epochs}, –û—à–∏–±–∫–∞: ${totalError.toFixed(4)}`);
  }
  
  return { weights, biases };
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ü–∏—Ñ—Ä...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ü–∏—Ñ—Ä
    const patterns = createRealisticDigitPatterns();
    console.log('‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ü–∏—Ñ—Ä —Å–æ–∑–¥–∞–Ω—ã');
    
    // –û–±—É—á–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    const { weights, biases } = trainNetwork(patterns, 30);
    console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    const model = {
      weights: {},
      biases: {},
      metadata: {
        version: "1.0",
        created: new Date().toISOString().split('T')[0],
        canvasSize: 30,
        totalPixels: 900,
        description: "–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö —Ü–∏—Ñ—Ä",
        trainingEpochs: 5,
        learningRate: 0.01,
        trainingExamples: 10
      }
    };
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å–∞ –∏ —Å–º–µ—â–µ–Ω–∏—è
    for (let digit = 0; digit <= 9; digit++) {
      model.weights[digit.toString()] = weights[digit];
      model.biases[digit.toString()] = biases[digit];
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É public/models —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
    const modelName = `realistic-model-${timestamp}`;
    const modelPath = path.join(__dirname, 'public', 'models', `${modelName}.json`);
    
    fs.writeFileSync(modelPath, JSON.stringify(model, null, 2));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    const modelsListPath = path.join(__dirname, 'public', 'models', 'models.json');
    let modelsList = { models: [] };
    
    if (fs.existsSync(modelsListPath)) {
      try {
        const content = fs.readFileSync(modelsListPath, 'utf8');
        modelsList = JSON.parse(content);
      } catch (error) {
        console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π');
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫
    modelsList.models.push({
      name: modelName,
      type: 'realistic',
      description: model.metadata.description
    });
    
    fs.writeFileSync(modelsListPath, JSON.stringify(modelsList, null, 2));
    
    console.log('‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${Object.keys(model.weights).length} —Ü–∏—Ñ—Ä √ó ${model.weights[0].length} –ø–∏–∫—Å–µ–ª–µ–π`);
    console.log(`üìÅ –§–∞–π–ª: ${modelPath}`);
    console.log(`üè∑Ô∏è  –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ${modelName}`);
    console.log(`üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
};

// –ó–∞–ø—É—Å–∫
main();
