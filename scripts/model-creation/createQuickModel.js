// –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

const fs = require('fs');
const path = require('path');

// –ü—Ä–æ—Å—Ç–∞—è —Å–∏–≥–º–æ–∏–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const sigmoid = (x) => {
  x = Math.max(-10, Math.min(10, x));
  return 1 / (1 + Math.exp(-x));
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ü–∏—Ñ—Ä
const createDigitPattern = (digit, width, height) => {
  const field = Array(height).fill().map(() => Array(width).fill(0));
  
  switch(digit) {
    case 0: // –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å
      const centerX = width / 2;
      const centerY = height / 2;
      const radius = Math.min(width, height) * 0.3;
      for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
          const dist = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
          if (Math.abs(dist - radius) <= 1) field[y][x] = 1;
        }
      }
      break;
      
    case 1: // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
      const midX = Math.floor(width / 2);
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.8); y++) {
        field[y][midX] = 1;
      }
      break;
      
    case 2: // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞
      for (let x = Math.floor(width * 0.2); x < Math.floor(width * 0.8); x++) {
        field[Math.floor(height * 0.2)][x] = 1; // –≤–µ—Ä—Ö
        field[Math.floor(height * 0.5)][x] = 1; // —Å–µ—Ä–µ–¥–∏–Ω–∞
        field[Math.floor(height * 0.8)][x] = 1; // –Ω–∏–∑
      }
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.5); y++) {
        field[y][Math.floor(width * 0.8)] = 1; // –ø—Ä–∞–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è
      }
      for (let y = Math.floor(height * 0.5); y < Math.floor(height * 0.8); y++) {
        field[y][Math.floor(width * 0.2)] = 1; // –ª–µ–≤–∞—è –Ω–∏–∂–Ω—è—è
      }
      break;
      
    case 3: // –¢—Ä–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ + –ø—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
      for (let x = Math.floor(width * 0.2); x < Math.floor(width * 0.8); x++) {
        field[Math.floor(height * 0.2)][x] = 1;
        field[Math.floor(height * 0.5)][x] = 1;
        field[Math.floor(height * 0.8)][x] = 1;
      }
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.8); y++) {
        field[y][Math.floor(width * 0.8)] = 1;
      }
      break;
      
    case 4: // –õ–µ–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è + —Å—Ä–µ–¥–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è + –ø—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.5); y++) {
        field[y][Math.floor(width * 0.2)] = 1;
      }
      for (let x = Math.floor(width * 0.2); x < Math.floor(width * 0.8); x++) {
        field[Math.floor(height * 0.5)][x] = 1;
      }
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.8); y++) {
        field[y][Math.floor(width * 0.8)] = 1;
      }
      break;
      
    case 5: // –ö–∞–∫ 2, –Ω–æ —Å –ø—Ä–∞–≤–æ–π –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç—å—é
      for (let x = Math.floor(width * 0.2); x < Math.floor(width * 0.8); x++) {
        field[Math.floor(height * 0.2)][x] = 1;
        field[Math.floor(height * 0.5)][x] = 1;
        field[Math.floor(height * 0.8)][x] = 1;
      }
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.5); y++) {
        field[y][Math.floor(width * 0.2)] = 1;
      }
      for (let y = Math.floor(height * 0.5); y < Math.floor(height * 0.8); y++) {
        field[y][Math.floor(width * 0.8)] = 1;
      }
      break;
      
    case 6: // –ö–∞–∫ 5, –Ω–æ —Å –ª–µ–≤–æ–π –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç—å—é
      for (let x = Math.floor(width * 0.2); x < Math.floor(width * 0.8); x++) {
        field[Math.floor(height * 0.2)][x] = 1;
        field[Math.floor(height * 0.5)][x] = 1;
        field[Math.floor(height * 0.8)][x] = 1;
      }
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.8); y++) {
        field[y][Math.floor(width * 0.2)] = 1;
      }
      for (let y = Math.floor(height * 0.5); y < Math.floor(height * 0.8); y++) {
        field[y][Math.floor(width * 0.8)] = 1;
      }
      break;
      
    case 7: // –í–µ—Ä—Ö–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è + –ø—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
      for (let x = Math.floor(width * 0.2); x < Math.floor(width * 0.8); x++) {
        field[Math.floor(height * 0.2)][x] = 1;
      }
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.8); y++) {
        field[y][Math.floor(width * 0.8)] = 1;
      }
      break;
      
    case 8: // –í—Å–µ –ª–∏–Ω–∏–∏
      for (let x = Math.floor(width * 0.2); x < Math.floor(width * 0.8); x++) {
        field[Math.floor(height * 0.2)][x] = 1;
        field[Math.floor(height * 0.5)][x] = 1;
        field[Math.floor(height * 0.8)][x] = 1;
      }
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.8); y++) {
        field[y][Math.floor(width * 0.2)] = 1;
        field[y][Math.floor(width * 0.8)] = 1;
      }
      break;
      
    case 9: // –ö–∞–∫ 8, –Ω–æ –±–µ–∑ –ª–µ–≤–æ–π –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏
      for (let x = Math.floor(width * 0.2); x < Math.floor(width * 0.8); x++) {
        field[Math.floor(height * 0.2)][x] = 1;
        field[Math.floor(height * 0.5)][x] = 1;
        field[Math.floor(height * 0.8)][x] = 1;
      }
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.5); y++) {
        field[y][Math.floor(width * 0.2)] = 1;
      }
      for (let y = Math.floor(height * 0.2); y < Math.floor(height * 0.8); y++) {
        field[y][Math.floor(width * 0.8)] = 1;
      }
      break;
  }
  
  return field.flat();
};

// –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ
const quickTrain = (width, height) => {
  const totalPixels = width * height;
  const weights = {};
  const biases = {};
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  for (let digit = 0; digit <= 9; digit++) {
    weights[digit] = new Array(totalPixels).fill(0);
    biases[digit] = 0;
  }
  
  // –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ 5 —ç–ø–æ—Ö
  for (let epoch = 0; epoch < 5; epoch++) {
    for (let digit = 0; digit <= 9; digit++) {
      const pattern = createDigitPattern(digit, width, height);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Ü–∏—Ñ—Ä
      for (let d = 0; d <= 9; d++) {
        const target = d === digit ? 1 : 0;
        
        for (let i = 0; i < totalPixels; i++) {
          const weight = weights[d][i];
          const pixel = pattern[i];
          const prediction = sigmoid(weight * pixel + biases[d]);
          const error = target - prediction;
          
          weights[d][i] += error * pixel * 0.1;
        }
        biases[d] += (target - sigmoid(biases[d])) * 0.1;
      }
    }
    console.log(`–≠–ø–æ—Ö–∞ ${epoch + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  }
  
  return { weights, biases };
};

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª–∏...');
const { weights, biases } = quickTrain(30, 30);

const model = {
  weights: weights,
  biases: biases,
  metadata: {
    version: "1.0",
    created: new Date().toISOString().split('T')[0],
    canvasSize: 30,
    totalPixels: 900,
    description: "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä",
    trainingEpochs: 5,
    learningRate: 0.1,
    trainingExamples: 50
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É public/models —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
const modelName = `quick-model-${timestamp}`;
const modelPath = path.join(__dirname, 'public', 'models', `${modelName}.json`);
fs.writeFileSync(modelPath, JSON.stringify(model, null, 2));

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
const modelsListPath = path.join(__dirname, 'public', 'models', 'models.json');
let modelsList = { models: [] };

if (fs.existsSync(modelsListPath)) {
  try {
    const content = fs.readFileSync(modelsListPath, 'utf8');
    modelsList = JSON.parse(content);
  } catch (error) {
    console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π');
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫
modelsList.models.push({
  name: modelName,
  type: 'quick',
  description: '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
});

fs.writeFileSync(modelsListPath, JSON.stringify(modelsList, null, 2));

console.log('‚úÖ –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
console.log(`üìä –†–∞–∑–º–µ—Ä: ${Object.keys(model.weights).length} —Ü–∏—Ñ—Ä √ó ${model.weights[0].length} –ø–∏–∫—Å–µ–ª–µ–π`);
console.log(`üìÅ –§–∞–π–ª: ${modelPath}`);
console.log(`üè∑Ô∏è  –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ${modelName}`);
console.log(`üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω`);
