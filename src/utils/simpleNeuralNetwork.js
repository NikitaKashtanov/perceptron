// –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä

// –ü—Ä–æ—Å—Ç–∞—è —Å–∏–≥–º–æ–∏–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const sigmoid = (x) => {
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  x = Math.max(-10, Math.min(10, x));
  return 1 / (1 + Math.exp(-x));
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
const initializeWeights = (inputSize) => {
  const weights = {};
  const biases = {};
  
  for (let digit = 0; digit <= 9; digit++) {
    weights[digit] = [];
    biases[digit] = 0;
    
    for (let i = 0; i < inputSize; i++) {
      weights[digit][i] = (Math.random() - 0.5) * 0.01; // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –≤–µ—Å–∞
    }
  }
  
  return { weights, biases };
};

// –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
const predictDigit = (input, weights, biases, digit) => {
  let sum = biases[digit];
  
  for (let i = 0; i < input.length; i++) {
    sum += input[i] * weights[digit][i];
  }
  
  return sigmoid(sum);
};

// –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ
const trainExample = (input, target, weights, biases, learningRate) => {
  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –≤–µ—Å–æ–≤ –∏ —Å–º–µ—â–µ–Ω–∏–π
  const newWeights = {};
  const newBiases = {};
  
  for (let digit = 0; digit <= 9; digit++) {
    newWeights[digit] = [...weights[digit]];
    newBiases[digit] = biases[digit];
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Ü–∏—Ñ—Ä
  for (let digit = 0; digit <= 9; digit++) {
    const prediction = predictDigit(input, weights, biases, digit);
    const targetValue = digit === target ? 1 : 0;
    const error = targetValue - prediction;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞
    for (let i = 0; i < input.length; i++) {
      newWeights[digit][i] += error * input[i] * learningRate;
    }
    
    newBiases[digit] += error * learningRate;
  }
  
  return { weights: newWeights, biases: newBiases };
};

// –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ
const trainSimple = (trainingData, epochs = 20, learningRate = 0.01) => {
  const inputSize = trainingData[0].input.length;
  let { weights, biases } = initializeWeights(inputSize);
  
  console.log(`–û–±—É—á–µ–Ω–∏–µ –Ω–∞ ${trainingData.length} –ø—Ä–∏–º–µ—Ä–∞—Ö...`);
  
  for (let epoch = 0; epoch < epochs; epoch++) {
    let totalError = 0;
    
    for (const example of trainingData) {
      const result = trainExample(example.input, example.target, weights, biases, learningRate);
      weights = result.weights;
      biases = result.biases;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É
      for (let digit = 0; digit <= 9; digit++) {
        const prediction = predictDigit(example.input, weights, biases, digit);
        const targetValue = digit === example.target ? 1 : 0;
        totalError += Math.abs(targetValue - prediction);
      }
    }
    
    if (epoch % 5 === 0) {
      console.log(`–≠–ø–æ—Ö–∞ ${epoch}: –û—à–∏–±–∫–∞ = ${(totalError / (trainingData.length * 10)).toFixed(4)}`);
    }
  }
  
  return { weights, biases };
};

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
const testModel = (testData, weights, biases) => {
  let correct = 0;
  
  for (const example of testData) {
    let maxPrediction = -1;
    let predictedDigit = 0;
    
    for (let digit = 0; digit <= 9; digit++) {
      const prediction = predictDigit(example.input, weights, biases, digit);
      if (prediction > maxPrediction) {
        maxPrediction = prediction;
        predictedDigit = digit;
      }
    }
    
    if (predictedDigit === example.target) {
      correct++;
    }
  }
  
  const accuracy = (correct / testData.length) * 100;
  console.log(`–¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy.toFixed(2)}% (${correct}/${testData.length})`);
  return accuracy;
};

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
const createSimpleModel = (weights, biases, canvasWidth, canvasHeight, accuracy) => {
  return {
    weights: weights,
    biases: biases,
    metadata: {
      version: "1.0",
      created: new Date().toISOString().split('T')[0],
      canvasWidth: canvasWidth,
      canvasHeight: canvasHeight,
      totalPixels: canvasWidth * canvasHeight,
      description: `–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é ${accuracy.toFixed(2)}%`,
      trainingEpochs: 20,
      learningRate: 0.01,
      trainingExamples: canvasWidth * canvasHeight * 5
    }
  };
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
export const trainSimpleNeuralNetwork = async (canvasWidth = 30, canvasHeight = null) => {
  console.log('üöÄ –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
  
  try {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ canvasWidth, —Å—á–∏—Ç–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const height = canvasHeight || canvasWidth;
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const { generateTrainingData } = await import('../data/digitPatterns.js');
    const trainingData = generateTrainingData(canvasWidth, height, 5);
    
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ ${trainingData.length} –ø—Ä–∏–º–µ—Ä–æ–≤`);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const shuffledData = [...trainingData].sort(() => Math.random() - 0.5);
    const splitIndex = Math.floor(shuffledData.length * 0.8);
    const trainSet = shuffledData.slice(0, splitIndex);
    const testSet = shuffledData.slice(splitIndex);
    
    console.log(`üìö –û–±—É—á–∞—é—â–∏—Ö: ${trainSet.length}, —Ç–µ—Å—Ç–æ–≤—ã—Ö: ${testSet.length}`);
    
    // –û–±—É—á–∞–µ–º
    const { weights, biases } = trainSimple(trainSet, 20, 0.01);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º
    const accuracy = testModel(testSet, weights, biases);
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    const model = createSimpleModel(weights, biases, canvasWidth, height, accuracy);
    
    console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    return model;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
    throw error;
  }
};
