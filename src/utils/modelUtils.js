// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
export const loadTrainedModel = async () => {
  try {
    const response = await fetch('./trainedModel.json');
    if (!response.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å');
    }
    const modelData = await response.json();
    return modelData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', error);
    return null;
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –≤ JSON —Ñ–∞–π–ª
export const saveModelToFile = (weights, biases, canvasSize) => {
  const modelData = {
    weights: {},
    biases: {},
    metadata: {
      version: "1.0",
      created: new Date().toISOString().split('T')[0],
      canvasSize: canvasSize,
      totalPixels: canvasSize * canvasSize,
      description: "–û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    }
  };

  // –ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å–∞ –∏ —Å–º–µ—â–µ–Ω–∏—è
  for (let digit = 0; digit <= 9; digit++) {
    modelData.weights[digit.toString()] = weights[digit] || [];
    modelData.biases[digit.toString()] = biases[digit] || 0;
  }

  // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const dataStr = JSON.stringify(modelData, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = 'trainedModel.json';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  return modelData;
};

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–ø–æ–¥–º–µ–Ω–∞ localStorage)
export const applyTrainedModel = (modelData) => {
  if (!modelData) return false;
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ localStorage –∫–∞–∫ backup
    const currentWeights = localStorage.getItem('neuralNetwork_weights');
    const currentBiases = localStorage.getItem('neuralNetwork_biases');
    
    if (currentWeights && currentBiases) {
      localStorage.setItem('neuralNetwork_weights_backup', currentWeights);
      localStorage.setItem('neuralNetwork_biases_backup', currentBiases);
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
    localStorage.setItem('neuralNetwork_weights', JSON.stringify(modelData.weights));
    localStorage.setItem('neuralNetwork_biases', JSON.stringify(modelData.biases));
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    return false;
  }
};

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª–∏ –∏–∑ backup
export const restoreBackupModel = () => {
  try {
    const backupWeights = localStorage.getItem('neuralNetwork_weights_backup');
    const backupBiases = localStorage.getItem('neuralNetwork_biases_backup');
    
    if (backupWeights && backupBiases) {
      localStorage.setItem('neuralNetwork_weights', backupWeights);
      localStorage.setItem('neuralNetwork_biases', backupBiases);
      return true;
    }
    return false;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    return false;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ —Å —Ç–µ–∫—É—â–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –∫–∞–Ω–≤–∞—Å–∞
export const isModelCompatible = (modelData, canvasWidth, canvasHeight = null) => {
  if (!modelData || !modelData.metadata) return false;
  
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ canvasWidth, —Å—á–∏—Ç–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const height = canvasHeight || canvasWidth;
  const expectedPixels = canvasWidth * height;
  const modelPixels = modelData.metadata.totalPixels;
  
  return modelPixels === expectedPixels;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
export const getAvailableModels = async () => {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ models.json
    const response = await fetch('./models/models.json');
    if (!response.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π');
    }
    
    const modelsList = await response.json();
    const models = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞
    for (const modelInfo of modelsList.models) {
      try {
        const modelResponse = await fetch(`./models/${modelInfo.name}.json`);
        if (modelResponse.ok) {
          const modelData = await modelResponse.json();
          models.push({
            name: modelInfo.name,
            metadata: modelData.metadata || {},
            type: modelInfo.type,
            description: modelInfo.description
          });
        }
      } catch (error) {
        // –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        console.log(`–ú–æ–¥–µ–ª—å ${modelInfo.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    }
    
    return models;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
    return [];
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∏
export const loadModelByName = async (modelName) => {
  try {
    const response = await fetch(`./models/${modelName}.json`);
    if (!response.ok) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å ${modelName}`);
    }
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', error);
    return null;
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
export const saveModelWithName = (weights, biases, canvasWidth, canvasHeight = null, description = "–û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") => {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
  const modelName = `user-model-${timestamp}`;
  
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ canvasWidth, —Å—á–∏—Ç–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const height = canvasHeight || canvasWidth;
  const totalPixels = canvasWidth * height;
  
  const modelData = {
    weights: {},
    biases: {},
    metadata: {
      version: "1.0",
      created: new Date().toISOString().split('T')[0],
      canvasWidth: canvasWidth,
      canvasHeight: height,
      totalPixels: totalPixels,
      description: description,
      name: modelName
    }
  };

  // –ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å–∞ –∏ —Å–º–µ—â–µ–Ω–∏—è
  for (let digit = 0; digit <= 9; digit++) {
    modelData.weights[digit.toString()] = weights[digit] || [];
    modelData.biases[digit.toString()] = biases[digit] || 0;
  }

  // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const dataStr = JSON.stringify(modelData, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `${modelName}.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log(`üìÅ –ú–æ–¥–µ–ª—å "${modelName}" —Å–∫–∞—á–∞–Ω–∞!`);
  console.log(`üìã –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π:`);
  console.log(`1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª ${modelName}.json –≤ –ø–∞–ø–∫—É public/models/`);
  console.log(`2. –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª public/models/models.json, –¥–æ–±–∞–≤–∏–≤:`);
  console.log(`   {"name": "${modelName}", "type": "manual", "description": "${description}"}`);
  
  return { modelData, modelName };
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
export const generateRandomModel = (canvasSize) => {
  const totalPixels = canvasSize * canvasSize;
  const weights = {};
  const biases = {};
  
  for (let digit = 0; digit <= 9; digit++) {
    weights[digit] = new Array(totalPixels).fill(0).map(() => 
      Math.random() * 0.2 - 0.1
    );
    biases[digit] = Math.random() * 0.2 - 0.1;
  }
  
  return {
    weights,
    biases,
    metadata: {
      version: "1.0",
      created: new Date().toISOString().split('T')[0],
      canvasSize: canvasSize,
      totalPixels: totalPixels,
      description: "–°–ª—É—á–∞–π–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
    }
  };
};
