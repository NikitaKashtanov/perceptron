// –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä

// –°–∏–≥–º–æ–∏–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const sigmoid = (x) => {
  return 1 / (1 + Math.exp(-x));
};

// –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Å–∏–≥–º–æ–∏–¥–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
const sigmoidDerivative = (x) => {
  const s = sigmoid(x);
  return s * (1 - s);
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
const initializeWeights = (inputSize, outputSize) => {
  const weights = {};
  const biases = {};
  
  for (let digit = 0; digit <= 9; digit++) {
    weights[digit] = new Array(inputSize).fill(0).map(() => 
      Math.random() * 0.1 - 0.05
    );
    biases[digit] = Math.random() * 0.1 - 0.05;
  }
  
  return { weights, biases };
};

// –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
const predictDigit = (input, weights, biases, digit) => {
  let sum = biases[digit] || 0;
  
  for (let i = 0; i < input.length; i++) {
    sum += input[i] * weights[digit][i];
  }
  
  return sigmoid(sum);
};

// –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ
const trainOnExample = (input, target, weights, biases, learningRate) => {
  const newWeights = { ...weights };
  const newBiases = { ...biases };
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Ü–∏—Ñ—Ä
  for (let digit = 0; digit <= 9; digit++) {
    const prediction = predictDigit(input, weights, biases, digit);
    const targetValue = (digit === target) ? 1 : 0;
    const error = targetValue - prediction;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞
    for (let i = 0; i < input.length; i++) {
      newWeights[digit][i] += error * input[i] * learningRate;
    }
    
    newBiases[digit] += error * learningRate;
  }
  
  return { weights: newWeights, biases: newBiases };
};

// –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
const trainNetwork = (trainingData, epochs = 100, learningRate = 0.01) => {
  const inputSize = trainingData[0].input.length;
  let { weights, biases } = initializeWeights(inputSize, 10);
  
  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ ${trainingData.length} –ø—Ä–∏–º–µ—Ä–∞—Ö...`);
  
  for (let epoch = 0; epoch < epochs; epoch++) {
    let totalError = 0;
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ø–æ—Ö–∞
    const shuffledData = [...trainingData].sort(() => Math.random() - 0.5);
    
    for (const example of shuffledData) {
      const result = trainOnExample(example.input, example.target, weights, biases, learningRate);
      weights = result.weights;
      biases = result.biases;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
      for (let digit = 0; digit <= 9; digit++) {
        const prediction = predictDigit(example.input, weights, biases, digit);
        const targetValue = (digit === example.target) ? 1 : 0;
        totalError += Math.abs(targetValue - prediction);
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —ç–ø–æ—Ö–æ–≤
    if (epoch % 10 === 0) {
      console.log(`–≠–ø–æ—Ö–∞ ${epoch}: –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ = ${(totalError / (trainingData.length * 10)).toFixed(4)}`);
    }
  }
  
  console.log('–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  return { weights, biases };
};

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
const testAccuracy = (testData, weights, biases) => {
  let correct = 0;
  let total = testData.length;
  
  for (const example of testData) {
    let maxPrediction = 0;
    let predictedDigit = 0;
    
    for (let digit = 0; digit <= 9; digit++) {
      const prediction = predictDigit(example.input, weights, biases, digit);
      if (prediction > maxPrediction) {
        maxPrediction = prediction;
        predictedDigit = digit;
      }
    }
    
    if (predictedDigit === example.target) {
      correct++;
    }
  }
  
  const accuracy = (correct / total) * 100;
  console.log(`–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${accuracy.toFixed(2)}% (${correct}/${total})`);
  return accuracy;
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
const createModelJSON = (weights, biases, canvasSize, accuracy) => {
  return {
    weights: weights,
    biases: biases,
    metadata: {
      version: "1.0",
      created: new Date().toISOString().split('T')[0],
      canvasSize: canvasSize,
      totalPixels: canvasSize * canvasSize,
      description: `–ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é ${accuracy.toFixed(2)}%`,
      trainingEpochs: 100,
      learningRate: 0.01,
      trainingExamples: canvasSize * canvasSize * 5 // 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã
    }
  };
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
export const trainNeuralNetwork = async (canvasSize = 30) => {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  const { generateTrainingData } = await import('./digitPatterns.js');
  const trainingData = generateTrainingData(canvasSize, canvasSize, 5);
  
  console.log(`üìä –°–æ–∑–¥–∞–Ω–æ ${trainingData.length} –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤`);
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–∞—é—â–∏–µ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (80/20)
  const shuffledData = [...trainingData].sort(() => Math.random() - 0.5);
  const splitIndex = Math.floor(shuffledData.length * 0.8);
  const trainSet = shuffledData.slice(0, splitIndex);
  const testSet = shuffledData.slice(splitIndex);
  
  console.log(`üìö –û–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: ${trainSet.length}`);
  console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: ${testSet.length}`);
  
  // –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
  const { weights, biases } = trainNetwork(trainSet, 100, 0.01);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
  const accuracy = testAccuracy(testSet, weights, biases);
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
  const modelJSON = createModelJSON(weights, biases, canvasSize, accuracy);
  
  console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log(`üìà –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: ${accuracy.toFixed(2)}%`);
  
  return modelJSON;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ —Ñ–∞–π–ª
export const saveTrainedModel = async (canvasSize = 30) => {
  const model = await trainNeuralNetwork(canvasSize);
  
  // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const dataStr = JSON.stringify(model, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = 'trainedModel.json';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  console.log('üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª trainedModel.json');
  return model;
};
