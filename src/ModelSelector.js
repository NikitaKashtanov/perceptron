import React, { useState, useEffect } from 'react';
import './ModelSelector.css';

const ModelSelector = ({ onModelSelect, selectedModel, onRefresh }) => {
  const [availableModels, setAvailableModels] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  const loadAvailableModels = async () => {
    setIsLoading(true);
    setError('');
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ models.json
      const response = await fetch('./models/models.json');
      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π');
      }
      
      const modelsList = await response.json();
      const models = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞
      for (const modelInfo of modelsList.models) {
        try {
          const modelResponse = await fetch(`./models/${modelInfo.name}.json`);
          if (modelResponse.ok) {
            const modelData = await modelResponse.json();
            models.push({
              name: modelInfo.name,
              metadata: modelData.metadata || {},
              type: modelInfo.type,
              description: modelInfo.description
            });
          }
        } catch (err) {
          // –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          console.log(`–ú–æ–¥–µ–ª—å ${modelInfo.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      }
      
      setAvailableModels(models);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π');
      setAvailableModels([]);
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∏
  const loadModel = async (modelName) => {
    try {
      const response = await fetch(`./models/${modelName}.json`);
      if (!response.ok) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å ${modelName}`);
      }
      
      const modelData = await response.json();
      onModelSelect(modelData, modelName);
      setError('');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', err);
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ${modelName}`);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
  const handleRefresh = () => {
    loadAvailableModels();
    if (onRefresh) {
      onRefresh();
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadAvailableModels();
  }, []);

  return (
    <div className="model-selector">
      <div className="model-selector-header">
        <h4>–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏</h4>
        <button 
          onClick={handleRefresh} 
          className="refresh-button"
          disabled={isLoading}
        >
          {isLoading ? 'üîÑ' : 'üîÑ'} –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {error && (
        <div className="error-message">
          ‚ö†Ô∏è {error}
        </div>
      )}

      {isLoading ? (
        <div className="loading-message">
          üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...
        </div>
      ) : (
        <div className="models-list">
          {availableModels.length === 0 ? (
            <div className="no-models">
              üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
              <br />
              <small>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å"</small>
            </div>
          ) : (
            availableModels.map((model) => (
              <div 
                key={model.name}
                className={`model-item ${selectedModel === model.name ? 'selected' : ''}`}
                onClick={() => loadModel(model.name)}
              >
                <div className="model-name">
                  üß† {model.name}
                </div>
                <div className="model-description">
                  {model.description || model.metadata.description}
                </div>
                <div className="model-details">
                  <span className="model-date">üìÖ {model.metadata.created}</span>
                  <span className="model-size">üìè {model.metadata.canvasWidth || model.metadata.canvasSize}√ó{model.metadata.canvasHeight || model.metadata.canvasSize}</span>
                  <span className="model-epochs">üîÑ {model.metadata.trainingEpochs} —ç–ø–æ—Ö</span>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {selectedModel && (
        <div className="selected-model-info">
          <strong>–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å:</strong> {selectedModel}
        </div>
      )}
    </div>
  );
};

export default ModelSelector;
