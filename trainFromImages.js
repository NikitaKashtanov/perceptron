// Обучение нейросети на реальных изображениях цифр

const fs = require('fs');
const path = require('path');
const https = require('https');

// Простая сигмоидальная функция
const sigmoid = (x) => {
  x = Math.max(-10, Math.min(10, x));
  return 1 / (1 + Math.exp(-x));
};

// Скачивание изображения
const downloadImage = (url, filename) => {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(filename);
    https.get(url, (response) => {
      response.pipe(file);
      file.on('finish', () => {
        file.close();
        resolve(filename);
      });
    }).on('error', (err) => {
      fs.unlink(filename, () => {}); // Удаляем файл при ошибке
      reject(err);
    });
  });
};

// Простая конвертация изображения в пиксельные данные
// Для простоты используем ASCII-арт паттерны вместо реальных изображений
const createDigitPatterns = () => {
  const patterns = {};
  
  // Простые ASCII-паттерны для цифр (30x30)
  const digitPatterns = {
    0: `
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
    `,
    1: `
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
    `,
    2: `
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
    `,
    3: `
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
    `,
    4: `
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
    `,
    5: `
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
    `,
    6: `
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
    `,
    7: `
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
    `,
    8: `
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
    `,
    9: `
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
      ##############################
    `
  };
  
  // Конвертируем ASCII-паттерны в пиксельные данные
  for (let digit = 0; digit <= 9; digit++) {
    const pattern = digitPatterns[digit];
    const lines = pattern.trim().split('\n');
    const pixels = [];
    
    for (const line of lines) {
      for (let i = 0; i < line.length; i++) {
        pixels.push(line[i] === '#' ? 1 : 0);
      }
    }
    
    patterns[digit] = pixels;
  }
  
  return patterns;
};

// Обучение нейросети
const trainNetwork = (patterns, canvasSize = 30) => {
  const totalPixels = canvasSize * canvasSize;
  const weights = {};
  const biases = {};
  
  // Инициализация весов
  for (let digit = 0; digit <= 9; digit++) {
    weights[digit] = new Array(totalPixels).fill(0).map(() => (Math.random() - 0.5) * 0.01);
    biases[digit] = (Math.random() - 0.5) * 0.01;
  }
  
  const learningRate = 0.01;
  const epochs = 3; // Быстрое обучение
  
  console.log('🚀 Начинаем обучение на изображениях...');
  console.log(`📊 Размер канваса: ${canvasSize}x${canvasSize}`);
  console.log(`📈 Эпох обучения: ${epochs}`);
  
  for (let epoch = 0; epoch < epochs; epoch++) {
    let totalError = 0;
    
    for (let digit = 0; digit <= 9; digit++) {
      const pattern = patterns[digit];
      
      // Обновляем веса для всех цифр
      for (let d = 0; d <= 9; d++) {
        let sum = biases[d];
        for (let i = 0; i < totalPixels; i++) {
          sum += pattern[i] * weights[d][i];
        }
        
        const prediction = sigmoid(sum);
        const target = d === digit ? 1 : 0;
        const error = target - prediction;
        totalError += Math.abs(error);
        
        // Обновляем веса
        biases[d] += learningRate * error;
        for (let i = 0; i < totalPixels; i++) {
          weights[d][i] += learningRate * error * pattern[i];
        }
      }
    }
    
    console.log(`Эпоха ${epoch + 1}/${epochs}, Ошибка: ${totalError.toFixed(4)}`);
  }
  
  return { weights, biases };
};

// Основная функция
const main = async () => {
  console.log('🎯 Создание модели на основе изображений цифр...');
  
  try {
    // Создаем паттерны цифр
    const patterns = createDigitPatterns();
    console.log('✅ Паттерны цифр созданы');
    
    // Обучаем нейросеть
    const { weights, biases } = trainNetwork(patterns, 30);
    console.log('✅ Обучение завершено');
    
    // Создаем модель
    const model = {
      weights: {},
      biases: {},
      metadata: {
        version: "1.0",
        created: new Date().toISOString().split('T')[0],
        canvasSize: 30,
        totalPixels: 900,
        description: "Модель обучена на изображениях цифр",
        trainingEpochs: 3,
        learningRate: 0.01,
        trainingExamples: 10
      }
    };
    
    // Копируем веса и смещения
    for (let digit = 0; digit <= 9; digit++) {
      model.weights[digit.toString()] = weights[digit];
      model.biases[digit.toString()] = biases[digit];
    }
    
    // Сохранение в папку public/models с уникальным именем
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
    const modelName = `image-model-${timestamp}`;
    const modelPath = path.join(__dirname, 'public', 'models', `${modelName}.json`);
    
    fs.writeFileSync(modelPath, JSON.stringify(model, null, 2));
    
    // Обновляем список моделей
    const modelsListPath = path.join(__dirname, 'public', 'models', 'models.json');
    let modelsList = { models: [] };
    
    if (fs.existsSync(modelsListPath)) {
      try {
        const content = fs.readFileSync(modelsListPath, 'utf8');
        modelsList = JSON.parse(content);
      } catch (error) {
        console.log('Создаем новый список моделей');
      }
    }
    
    // Добавляем новую модель в список
    modelsList.models.push({
      name: modelName,
      type: 'image-based',
      description: model.metadata.description
    });
    
    fs.writeFileSync(modelsListPath, JSON.stringify(modelsList, null, 2));
    
    console.log('✅ Модель на изображениях создана и сохранена!');
    console.log(`📊 Размер: ${Object.keys(model.weights).length} цифр × ${model.weights[0].length} пикселей`);
    console.log(`📁 Файл: ${modelPath}`);
    console.log(`🏷️  Название модели: ${modelName}`);
    console.log(`📋 Список моделей обновлен`);
    
  } catch (error) {
    console.error('❌ Ошибка:', error);
  }
};

// Запуск
main();
