// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è trainedModel.json

import { trainNeuralNetwork } from './src/neuralNetworkTrainer.js';
import fs from 'fs';
import path from 'path';

async function main() {
  console.log('üß† –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä...');
  console.log('üìè –†–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞: 30x30 –ø–∏–∫—Å–µ–ª–µ–π');
  console.log('üéØ –¶–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ü–∏—Ñ—Ä 0-9');
  console.log('');

  try {
    // –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    const trainedModel = await trainNeuralNetwork(30);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const modelPath = path.join(process.cwd(), 'public', 'trainedModel.json');
    fs.writeFileSync(modelPath, JSON.stringify(trainedModel, null, 2));
    
    console.log('');
    console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${modelPath}`);
    console.log(`üìä –¢–æ—á–Ω–æ—Å—Ç—å: ${trainedModel.metadata.description}`);
    console.log(`üìà –ü—Ä–∏–º–µ—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è: ${trainedModel.metadata.trainingExamples}`);
    console.log('');
    console.log('üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
main();
